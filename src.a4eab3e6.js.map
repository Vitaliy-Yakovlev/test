{"version":3,"sources":["js/timer.js","index.js"],"names":["refs","divTimer","document","querySelector","spanDays","spanhHours","spanMins","spanSecs","CountdownTimer","constructor","selector","targetDate","startTime","Date","intervalId","setInterval","currentTime","now","deltaTime","updateClockface","getTimeComponents","clearInterval","innerHTML","Timer","days","hours","mins","secs","textContent","time","pad","Math","floor","value","String","padStart"],"mappings":";;;AAAA,MAAMA,EAAO,CACXC,SAAUC,SAASC,cAAc,YACjCC,SAAUF,SAASC,cAAc,uBACjCE,WAAYH,SAASC,cAAc,wBACnCG,SAAUJ,SAASC,cAAc,uBACjCI,SAAUL,SAASC,cAAc,wBAGnC,MAAMK,EACJC,aAAY,SAAEC,EAAF,WAAYC,IAChBC,MAAAA,EAAY,IAAIC,KAAKF,GAErBG,EAAaC,YAAY,KACvBC,MAAAA,EAAcH,KAAKI,MACnBC,EAAYN,EAAYI,EAG9BG,EAFaC,EAAkBF,IAI3BA,EAAY,IACdG,cAAcP,GACdd,EAAKC,SAASqB,UAAY,oBAE3B,MAIP,MAAMC,EAAQ,IAAIf,EAAe,CAC/BE,SAAU,WACVC,WAAY,IAAIE,KAAK,kBAGvB,SAASM,GAAgB,KAAEK,EAAF,MAAQC,EAAR,KAAeC,EAAf,KAAqBC,IAC5C3B,EAAKI,SAASwB,eAAiBJ,IAC/BxB,EAAKK,WAAWuB,eAAiBH,IACjCzB,EAAKM,SAASsB,eAAiBF,IAC/B1B,EAAKO,SAASqB,eAAiBD,IAGjC,SAASP,EAAkBS,GAMlB,MAAA,CAAEL,KALIM,EAAIC,KAAKC,MAAMH,EAAQ,QAKrBJ,MAJDK,EAAIC,KAAKC,MAAOH,EAAQ,MAAyB,OAIzCH,KAHTI,EAAIC,KAAKC,MAAOH,EAAQ,KAAoB,MAG7BF,KAFfG,EAAIC,KAAKC,MAAOH,EAAQ,IAAc,OAKrD,SAASC,EAAIG,GACJC,OAAAA,OAAOD,GAAOE,SAAS,EAAG;;AChDnC,aADA,QAAA,mBACA,QAAA","file":"src.a4eab3e6.js","sourceRoot":"..\\src","sourcesContent":["const refs = {\r\n  divTimer: document.querySelector('#timer-1'),\r\n  spanDays: document.querySelector('[data-value=\"days\"]'),\r\n  spanhHours: document.querySelector('[data-value=\"hours\"]'),\r\n  spanMins: document.querySelector('[data-value=\"mins\"]'),\r\n  spanSecs: document.querySelector('[data-value=\"secs\"]'),\r\n};\r\n\r\nclass CountdownTimer {\r\n  constructor({ selector, targetDate }) {\r\n    const startTime = new Date(targetDate);\r\n\r\n    const intervalId = setInterval(() => {\r\n      const currentTime = Date.now();\r\n      const deltaTime = startTime - currentTime;\r\n      const time = getTimeComponents(deltaTime);\r\n\r\n      updateClockface(time);\r\n\r\n      if (deltaTime < 0) {\r\n        clearInterval(intervalId);\r\n        refs.divTimer.innerHTML = 'Все время вышло';\r\n      }\r\n    }, 1000);\r\n  }\r\n}\r\n\r\nconst Timer = new CountdownTimer({\r\n  selector: '#timer-1',\r\n  targetDate: new Date('May 25, 2021'),\r\n});\r\n\r\nfunction updateClockface({ days, hours, mins, secs }) {\r\n  refs.spanDays.textContent = `${days}`;\r\n  refs.spanhHours.textContent = `${hours}`;\r\n  refs.spanMins.textContent = `${mins}`;\r\n  refs.spanSecs.textContent = `${secs}`;\r\n}\r\n\r\nfunction getTimeComponents(time) {\r\n  const days = pad(Math.floor(time / (1000 * 60 * 60 * 24)));\r\n  const hours = pad(Math.floor((time % (1000 * 60 * 60 * 24)) / (1000 * 60 * 60)));\r\n  const mins = pad(Math.floor((time % (1000 * 60 * 60)) / (1000 * 60)));\r\n  const secs = pad(Math.floor((time % (1000 * 60)) / 1000));\r\n\r\n  return { days, hours, mins, secs };\r\n}\r\n\r\nfunction pad(value) {\r\n  return String(value).padStart(2, '0');\r\n}\r\n","import './css/style.css';\r\nimport './js/timer';\r\n"]}